/// Model class representing a database request with associated data.
/// This class is used for communication between Dart and Rust layers.
class LocalDbModel {
  /// Unique identifier for the record.
  /// Must follow the ID format requirements (alphanumeric with - and _).
  final String id;

  /// Hash value generated by the Rust backend.
  /// Used for data integrity and version tracking.
  /// Can be null for new records.
  final String? hash;

  /// The actual data to be stored in the database.
  /// Must be JSON-serializable.
  final Map<String, dynamic> data;

  /// Creates a new [LocalDbModel] instance.
  ///
  /// [id] and [data] are required parameters.
  /// [hash] is optional and typically provided by the Rust backend.
  LocalDbModel({
    required this.id,
    this.hash,
    required this.data,
  });

  /// Converts the model to a JSON map.
  ///
  /// Used for serialization when sending data to the Rust backend.
  /// All fields are included in the resulting map.
  Map<String, dynamic> toJson() => {
        'id': id,
        'hash': hash,
        'data': data,
      };

  /// Creates a [LocalDbModel] instance from a JSON map.
  ///
  /// Used for deserializing data received from the Rust backend.
  /// Expects all fields to be present in the JSON map.
  factory LocalDbModel.fromJson(Map<String, dynamic> json) {
    return LocalDbModel(
      id: json['id'],
      hash: json['hash'],
      data: json['data'],
    );
  }

  /// Provides a string representation of the model.
  ///
  /// Used for debugging and logging purposes.
  @override
  String toString() {
    return 'LocalDbModel{id: $id, hash: $hash, data: $data}';
  }

  /// Creates a copy of this model with optional field updates.
  ///
  /// Fields that are not specified will retain their original values.
  /// Useful for modifying model data while maintaining immutability.
  LocalDbModel copyWith({
    String? id,
    String? hash,
    Map<String, dynamic>? data,
  }) =>
      LocalDbModel(
        id: id ?? this.id,
        hash: hash ?? this.hash,
        data: data ?? this.data,
      );
}
